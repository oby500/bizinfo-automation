name: Manual Fix All Data

on:
  workflow_dispatch:
    inputs:
      target:
        description: '처리 대상'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - bizinfo
          - kstartup
      limit:
        description: '처리 개수 제한'
        required: false
        default: '500'
        type: string

jobs:
  fix-data:
    name: 전체 데이터 수정 처리
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 supabase
    
    - name: Fix BizInfo Data
      if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'bizinfo' }}
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "=== 기업마당 데이터 수정 시작 ==="
        echo "처리 대상: safe_filename 없는 데이터 + unknown 확장자"
        python scripts/bizinfo_complete_processor_fast.py
    
    - name: Fix K-Startup Data
      if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'kstartup' }}
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "=== K-Startup 데이터 수정 시작 ==="
        echo "처리 대상: unknown 확장자 모두 재처리"
        python scripts/kstartup_complete_processor_final.py
    
    - name: Generate Comprehensive Report
      if: always()
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        cat << 'EOF' > report.py
        import os
        from supabase import create_client
        from datetime import datetime
        import json
        
        url = os.environ.get('SUPABASE_URL')
        key = os.environ.get('SUPABASE_SERVICE_KEY')
        
        if not url or not key:
            print("환경변수 오류")
            exit(1)
            
        supabase = create_client(url, key)
        
        print('\n' + '='*60)
        print('          전체 데이터 품질 보고서')
        print('='*60)
        
        # 기업마당 통계
        print('\n📊 기업마당 (bizinfo_complete)')
        print('-' * 50)
        
        bizinfo_total = supabase.table('bizinfo_complete').select('id').execute()
        total_biz = len(bizinfo_total.data) if bizinfo_total.data else 0
        
        bizinfo_with_attach = supabase.table('bizinfo_complete').select('attachment_urls').neq('attachment_urls', '[]').execute()
        
        biz_with_safe = 0
        biz_without_safe = 0
        biz_unknown = 0
        
        if bizinfo_with_attach.data:
            for item in bizinfo_with_attach.data:
                if item.get('attachment_urls'):
                    attachments_str = json.dumps(item['attachment_urls'])
                    if 'safe_filename' in attachments_str:
                        biz_with_safe += 1
                        if '.unknown' in attachments_str:
                            biz_unknown += 1
                    else:
                        biz_without_safe += 1
        
        print(f'전체: {total_biz}개')
        print(f'첨부파일 있음: {len(bizinfo_with_attach.data) if bizinfo_with_attach.data else 0}개')
        print(f'├─ safe_filename 있음: {biz_with_safe}개')
        print(f'├─ safe_filename 없음: {biz_without_safe}개 ⚠️')
        print(f'└─ unknown 확장자: {biz_unknown}개 ⚠️')
        
        # K-Startup 통계
        print('\n📊 K-Startup (kstartup_complete)')
        print('-' * 50)
        
        kstartup_total = supabase.table('kstartup_complete').select('id').execute()
        total_k = len(kstartup_total.data) if kstartup_total.data else 0
        
        kstartup_with_attach = supabase.table('kstartup_complete').select('attachment_urls').neq('attachment_urls', '[]').execute()
        
        k_proper = 0
        k_unknown = 0
        k_no_attach = 0
        
        if kstartup_with_attach.data:
            for item in kstartup_with_attach.data:
                if item.get('attachment_urls'):
                    has_unknown = False
                    for att in item['attachment_urls']:
                        if att.get('safe_filename', '').endswith('.unknown'):
                            has_unknown = True
                            break
                    if has_unknown:
                        k_unknown += 1
                    else:
                        k_proper += 1
        
        k_no_attach = total_k - len(kstartup_with_attach.data) if kstartup_with_attach.data else total_k
        
        print(f'전체: {total_k}개')
        print(f'├─ 첨부파일 없음: {k_no_attach}개')
        print(f'├─ 정상 파일명: {k_proper}개')
        print(f'└─ unknown 확장자: {k_unknown}개 ⚠️')
        
        # 처리 필요 항목
        print('\n🔧 처리 필요 항목')
        print('-' * 50)
        
        total_issues = biz_without_safe + biz_unknown + k_unknown
        
        if total_issues > 0:
            print(f'⚠️ 총 {total_issues}개 항목 처리 필요:')
            if biz_without_safe > 0:
                print(f'  - 기업마당 safe_filename 없음: {biz_without_safe}개')
            if biz_unknown > 0:
                print(f'  - 기업마당 unknown 확장자: {biz_unknown}개')
            if k_unknown > 0:
                print(f'  - K-Startup unknown 확장자: {k_unknown}개')
            print('\n💡 수동 실행으로 처리 가능합니다.')
        else:
            print('✅ 모든 데이터가 정상입니다!')
        
        # 최근 업데이트
        print('\n📅 최근 업데이트')
        print('-' * 50)
        
        today = datetime.now().date().isoformat()
        
        biz_today = supabase.table('bizinfo_complete').select('id').gte('updt_dt', today).execute()
        k_today = supabase.table('kstartup_complete').select('id').gte('created_at', today).execute()
        
        print(f'오늘 업데이트:')
        print(f'  - 기업마당: {len(biz_today.data) if biz_today.data else 0}개')
        print(f'  - K-Startup: {len(k_today.data) if k_today.data else 0}개')
        
        print('\n' + '='*60)
        print(f'보고서 생성: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
        print('='*60)
        
        EOF
        python report.py
