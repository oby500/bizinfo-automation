name: K-Startup Collection

on:
  schedule:
    # 평일 오전 7시 실행 (KST) = UTC 22:00 (전날)
    - cron: '0 22 * * 0-4'  # 일-목 UTC 22:00 = 월-금 KST 07:00
  workflow_dispatch:  # 수동 실행도 가능

jobs:
  collect-kstartup:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install requests beautifulsoup4
        pip install supabase
    
    - name: Collect K-Startup Data
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "=== K-Startup 데이터 수집 시작 ==="
        echo "실행 시간: $(date '+%Y-%m-%d %H:%M:%S')"
        python scripts/kstartup_collector.py
    
    - name: Process Attachments and Summary
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "=== K-Startup 첨부파일 및 요약 처리 ==="
        python -c "
import os
import sys
import time
import requests
from datetime import datetime
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from supabase import create_client

url = os.environ.get('SUPABASE_URL')
key = os.environ.get('SUPABASE_KEY')
supabase = create_client(url, key)

# 처리 대상 조회
result = supabase.table('kstartup_complete').select(
    'id', 'announcement_id', 'biz_pbanc_nm', 'detl_pg_url',
    'pbanc_ntrp_nm', 'aply_trgt_ctnt', 'pbanc_rcpt_end_dt'
).or_(
    'attachment_urls.is.null',
    'bsns_sumry.is.null'
).limit(50).execute()

processed = 0
for item in result.data:
    try:
        # 해시태그 생성
        tags = []
        if item.get('pbanc_ntrp_nm'):
            tags.append(f\"#{item['pbanc_ntrp_nm'][:15]}\")
        if item.get('aply_trgt_ctnt'):
            if '스타트업' in item['aply_trgt_ctnt']:
                tags.append('#스타트업')
            if '청년' in item['aply_trgt_ctnt']:
                tags.append('#청년창업')
        
        # 요약 생성
        summary = f\"📋 {item['biz_pbanc_nm']}\\n\"
        if item.get('pbanc_ntrp_nm'):
            summary += f\"🏢 주관: {item['pbanc_ntrp_nm']}\\n\"
        if item.get('pbanc_rcpt_end_dt'):
            summary += f\"📅 마감: {item['pbanc_rcpt_end_dt']}\\n\"
        if tags:
            summary += f\"🏷️ {' '.join(tags[:5])}\"
        
        # DB 업데이트
        supabase.table('kstartup_complete').update({
            'bsns_sumry': summary,
            'hash_tags': ' '.join(tags),
            'updated_at': datetime.now().isoformat()
        }).eq('id', item['id']).execute()
        
        processed += 1
        print(f\"처리: {item['biz_pbanc_nm'][:30]}...\")
        time.sleep(0.5)
        
    except Exception as e:
        print(f\"오류: {e}\")
        continue

print(f\"\\n✅ 처리 완료: {processed}개\")"
    
    - name: Generate Summary Report
      if: always()
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "=== K-Startup 처리 결과 ==="
        python -c "
import os
from supabase import create_client
from datetime import datetime

try:
    url = os.environ.get('SUPABASE_URL')
    key = os.environ.get('SUPABASE_KEY')
    supabase = create_client(url, key)
    
    # 전체 데이터
    total_result = supabase.table('kstartup_complete').select('id').execute()
    total_count = len(total_result.data) if total_result.data else 0
    
    # 오늘 추가된 데이터
    today = datetime.now().date().isoformat()
    today_result = supabase.table('kstartup_complete').select('id').gte('created_at', today).execute()
    today_count = len(today_result.data) if today_result.data else 0
    
    print(f'📊 K-Startup 처리 현황')
    print(f'━━━━━━━━━━━━━━━━━━━━━━')
    print(f'전체 데이터: {total_count}개')
    print(f'오늘 추가: {today_count}개')
    print(f'처리 시간: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')'
except Exception as e:
    print(f'통계 생성 실패: {e}')"
