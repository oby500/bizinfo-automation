name: K-Startup Auto Collection

on:
  workflow_dispatch:
    inputs:
      mode:
        description: '수집 모드'
        required: true
        default: 'daily'
        type: choice
        options:
        - daily    # 최근 200개 (페이지 2-3개)
        - full     # 전체 수집 259개 (30-60분)
  schedule:
    # UTC 기준 (한국시간 -9시간)
    # KST 06:30 = UTC 21:30 (전날)
    # KST 06:50 = UTC 21:50 (전날)
    # KST 07:10 = UTC 22:10 (전날)
    # KST 07:30 = UTC 22:30 (전날)
    - cron: '30 21 * * *'  # 한국시간 매일 오전 6시 30분
    - cron: '50 21 * * *'  # 한국시간 매일 오전 6시 50분
    - cron: '10 22 * * *'  # 한국시간 매일 오전 7시 10분
    - cron: '30 22 * * *'  # 한국시간 매일 오전 7시 30분

jobs:
  collect:
    name: K-Startup 데이터 수집
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Seoul'  # 한국 시간대 설정
    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 supabase python-dotenv lxml

    - name: Determine Mode
      id: mode
      run: |
        # 현재 시간 출력
        echo "현재 시간: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')"

        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "mode=daily" >> $GITHUB_OUTPUT
          echo "실행 모드: daily 모드"
        else
          echo "mode=${{ github.event.inputs.mode || 'daily' }}" >> $GITHUB_OUTPUT
          echo "실행 모드: ${{ github.event.inputs.mode || 'daily' }} 모드"
        fi

    - name: Create .env file
      run: |
        # 환경 변수 설정 (공개 URL과 키)
        echo "SUPABASE_URL=https://csuziaogycciwgxxmahm.supabase.co" >> .env
        echo "SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNzdXppYW9neWNjaXdneHhtYWhtIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzYxNTc4MCwiZXhwIjoyMDY5MTkxNzgwfQ.HnhM7zSLzi7lHVPd2IVQKIACDq_YA05mBMgZbSN1c9Q" >> .env
        echo "COLLECTION_MODE=${{ steps.mode.outputs.mode }}" >> .env

    # Step 1: 신규 K-Startup 공고 수집 (API 직접 호출)
    - name: Collect K-Startup Data
      run: |
        echo "신규 K-Startup 공고를 수집합니다 (API 직접 호출)..."
        echo "모드: ${{ steps.mode.outputs.mode }}"
        echo "참고 Daily 모드: 최근 200개 공고"
        echo "참고 Full 모드: 전체 공고"
        python scripts/kstartup_daily_collector.py
      continue-on-error: true

    # Step 2: 수집 결과 확인
    - name: Verify collection results
      run: |
        echo "수집 결과를 확인합니다..."
        python -c "
        from supabase import create_client
        import os
        from datetime import datetime
        from dotenv import load_dotenv

        load_dotenv()
        url = os.getenv('SUPABASE_URL')
        key = os.getenv('SUPABASE_KEY')
        supabase = create_client(url, key)

        # 전체 개수
        result = supabase.table('kstartup_complete').select('announcement_id').execute()
        total = len(result.data) if result.data else 0

        # 오늘 수집된 개수
        today = datetime.now().strftime('%Y-%m-%d')
        today_result = supabase.table('kstartup_complete').select('announcement_id').gte('created_at', today).execute()
        today_count = len(today_result.data) if today_result.data else 0

        # 상태별 통계
        status_result = supabase.table('kstartup_complete').select('status').execute()
        status_counts = {}
        if status_result.data:
            for item in status_result.data:
                status = item.get('status', '')
                status_counts[status] = status_counts.get(status, 0) + 1

        print('='*60)
        print('수집 K-Startup 공고 수집 완료 (데이터베이스 확인)')
        print('='*60)
        print(f'전체 공고 수: {total}개')
        print(f'오늘/금일: {today_count}개')
        print('')
        print('상태별 통계:')
        for status, count in sorted(status_counts.items(), key=lambda x: x[1], reverse=True):
            print(f'  - {status}: {count}개')
        print('='*60)
        print('수집 방식 참고:')
        print('  - perPage=200 (최대 페이지 크기)')
        print('  - 이후 50개씩 상세 정보 수집')
        print('  - 실시간 중복 확인')
        print('='*60)
        "

    # Step 3: bsns_sumry 파싱 (병렬 처리)
    - name: Step 3 - Parallel Parsing
      run: |
        if [ "${{ steps.mode.outputs.mode }}" = "daily" ]; then
          echo "실행 Step 3: 최신 50개 처리 (Daily 모드)..."
          export PROCESSING_LIMIT=50
        else
          echo "실행 Step 3: 전체 처리 (Full 모드)..."
          export PROCESSING_LIMIT=0
        fi
        python scripts/kstartup_parallel_parser.py || echo "파싱 실패 - 계속 진행"

    # Step 4: K-Startup 첨부파일 URL 수집 (상세 페이지)
    - name: Step 4 - K-Startup Attachment URL Collection
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        if [ "${{ steps.mode.outputs.mode }}" = "daily" ]; then
          echo "실행 Step 4: 최신 100개 첨부파일 URL 수집 (Daily 모드)..."
          echo "병렬 처리 활성화됨."
          export PROCESSING_LIMIT=100
        else
          echo "실행 Step 4: 전체 첨부파일 URL 수집 (Full 모드)..."
          export PROCESSING_LIMIT=0
        fi
        python scripts/kstartup_attachment_enhanced_fixed.py || echo "첨부파일 수집 실패 - 계속 진행"

    # Step 5: 첨부파일 URL 정규화 (URL 정제)
    - name: Step 5 - Clean Attachment URLs
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "실행 Step 5: 첨부파일 URL 정규화 (URL 정제)..."
        python scripts/clean_all_urls.py || echo "URL 정규화 실패 - 계속 진행"

    - name: Generate Final Report
      if: always()
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        cat << 'EOF' > report.py
        import os
        from supabase import create_client
        from datetime import datetime

        url = os.environ.get('SUPABASE_URL')
        key = os.environ.get('SUPABASE_SERVICE_KEY') or os.environ.get('SUPABASE_KEY')

        if not url or not key:
            print("환경변수 없음")
            exit(1)

        supabase = create_client(url, key)

        try:
            # 전체 개수
            total = supabase.table('kstartup_complete').select('id').execute()
            total_count = len(total.data) if total.data else 0

            # 오늘 신규 개수
            today = datetime.now().date().isoformat()
            today_new = supabase.table('kstartup_complete').select('id').gte('created_at', today).execute()
            today_count = len(today_new.data) if today_new.data else 0

            # 상태별 통계
            status_data = supabase.table('kstartup_complete').select('status').execute()
            status_counts = {}
            if status_data.data:
                for item in status_data.data:
                    status = item.get('status', '')
                    status_counts[status] = status_counts.get(status, 0) + 1

            print('\n' + '='*60)
            print('      K-STARTUP 최종 리포트')
            print('='*60)
            print(f'총합: {total_count}개 | 오늘/금일: {today_count}개')
            print('')
            print('상태별 통계:')
            for status, count in sorted(status_counts.items(), key=lambda x: x[1], reverse=True):
                print(f'   - {status}: {count}개')
            print('='*60)

        except Exception as e:
            print(f"오류 발생: {e}")
        EOF
        python report.py
