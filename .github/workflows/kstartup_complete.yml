name: K-Startup Auto Collection

on:
  workflow_dispatch:
    inputs:
      mode:
        description: '수집 모드'
        required: true
        default: 'daily'
        type: choice
        options:
        - daily    # 최근 200개만 (2-3초)
        - full     # 전체 259페이지 (30-60초)
  schedule:
    - cron: '0 22 * * *'  # 매일 오전 7시 (KST)

jobs:
  collect:
    name: K-Startup 자동 처리
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 supabase python-dotenv lxml
    
    - name: Determine Mode
      id: mode
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "mode=daily" >> $GITHUB_OUTPUT
          echo "📅 스케줄 실행: daily 모드"
        else
          echo "mode=${{ github.event.inputs.mode || 'daily' }}" >> $GITHUB_OUTPUT
          echo "🎯 수동 실행: ${{ github.event.inputs.mode || 'daily' }} 모드"
        fi
    
    - name: Create .env file
      run: |
        # 개발 환경 사용 (현재 사용 중)
        echo "SUPABASE_URL=https://csuziaogycciwgxxmahm.supabase.co" >> .env
        echo "SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNzdXppYW9neWNjaXdneHhtYWhtIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzYxNTc4MCwiZXhwIjoyMDY5MTkxNzgwfQ.HnhM7zSLzi7lHVPd2IVQKIACDq_YA05mBMgZbSN1c9Q" >> .env
        echo "COLLECTION_MODE=${{ steps.mode.outputs.mode }}" >> .env

    # Step 1: 실제 K-Startup 데이터 수집 (API 형식 변경 대응)
    - name: Collect K-Startup Data
      run: |
        echo "🚀 K-Startup 실제 데이터 수집 시작 (API 형식 변경 대응)..."
        echo "📅 모드: ${{ steps.mode.outputs.mode }}"
        echo "📊 Daily 모드: 최근 200개 확인"
        echo "📊 Full 모드: 전체 데이터 수집"
        python scripts/kstartup_daily_collector.py
      continue-on-error: true
    
    # Step 2: 수집 결과 확인
    - name: Verify collection results
      run: |
        echo "📊 수집 결과 확인..."
        python -c "
        from supabase import create_client
        import os
        from datetime import datetime
        from dotenv import load_dotenv
        
        load_dotenv()
        url = os.getenv('SUPABASE_URL')
        key = os.getenv('SUPABASE_KEY')
        supabase = create_client(url, key)
        
        # 전체 개수 확인
        result = supabase.table('kstartup_complete').select('announcement_id').execute()
        total = len(result.data) if result.data else 0
        
        # 오늘 수집된 개수
        today = datetime.now().strftime('%Y-%m-%d')
        today_result = supabase.table('kstartup_complete').select('announcement_id').gte('created_at', today).execute()
        today_count = len(today_result.data) if today_result.data else 0
        
        # 상태별 개수
        status_result = supabase.table('kstartup_complete').select('status').execute()
        status_counts = {}
        if status_result.data:
            for item in status_result.data:
                status = item.get('status', '상태미정')
                status_counts[status] = status_counts.get(status, 0) + 1
        
        print('='*60)
        print('📊 K-Startup 수집 완료 보고서 (개선된 로직)')
        print('='*60)
        print(f'총 저장된 공고: {total}개')
        print(f'오늘 수집/업데이트: {today_count}개')
        print('')
        print('상태별 분포:')
        for status, count in sorted(status_counts.items(), key=lambda x: x[1], reverse=True):
            print(f'  - {status}: {count}개')
        print('='*60)
        print('📌 개선 사항:')
        print('  - perPage=200 (구글시트와 동일)')
        print('  - 연속 50개 중복 시 자동 종료')
        print('  - 페이지 단위 중복 체크')
        print('='*60)
        "
    
    # Step 3: bsns_sumry 병렬 파싱 (선택적)
    - name: Step 3 - Parallel Parsing (Optional)
      if: steps.mode.outputs.mode == 'full'
      run: |
        echo "📝 Step 3: 상세 내용 병렬 파싱..."
        python scripts/kstartup_parallel_parser.py || echo "파싱 스크립트 없음 - 건너뛰기"
          
    # Step 4: K-Startup 첨부파일 처리
    - name: Step 4 - K-Startup Attachment Processing
      if: steps.mode.outputs.mode == 'full'
      run: |
        echo "📎 Step 4: K-Startup 첨부파일 처리..."
        python scripts/kstartup_attachment_processor.py || echo "첨부파일 처리 실패 - 건너뛰기"
          
    - name: Generate Final Report
      if: always()
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        cat << 'EOF' > report.py
        import os
        from supabase import create_client
        from datetime import datetime
        
        url = os.environ.get('SUPABASE_URL')
        key = os.environ.get('SUPABASE_SERVICE_KEY') or os.environ.get('SUPABASE_KEY')
        
        if not url or not key:
            print("환경변수 오류")
            exit(1)
            
        supabase = create_client(url, key)
        
        try:
            # 전체 통계
            total = supabase.table('kstartup_complete').select('id').execute()
            total_count = len(total.data) if total.data else 0
            
            # 오늘 추가된 데이터
            today = datetime.now().date().isoformat()
            today_new = supabase.table('kstartup_complete').select('id').gte('created_at', today).execute()
            today_count = len(today_new.data) if today_new.data else 0
            
            # 상태별 통계
            status_data = supabase.table('kstartup_complete').select('status').execute()
            status_counts = {}
            if status_data.data:
                for item in status_data.data:
                    status = item.get('status', '상태미정')
                    status_counts[status] = status_counts.get(status, 0) + 1
            
            print('\n' + '='*60)
            print('      K-STARTUP 처리 결과')
            print('='*60)
            print(f'📊 전체: {total_count}개 | 오늘 신규/업데이트: {today_count}개')
            print('')
            print('📈 상태별 분포:')
            for status, count in sorted(status_counts.items(), key=lambda x: x[1], reverse=True):
                print(f'   - {status}: {count}개')
            print('='*60)
            
        except Exception as e:
            print(f"보고서 오류: {e}")
        EOF
        python report.py
