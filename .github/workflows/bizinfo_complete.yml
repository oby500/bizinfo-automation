name: 🏢 Bizinfo Complete Workflow

on:
  workflow_dispatch:
    inputs:
      mode:
        description: '수집 모드'
        required: true
        default: 'daily'
        type: choice
        options:
        - daily    # 최근 7일 데이터만 (빠른 처리)
        - full     # 전체 데이터 처리 (완전 점검)
  schedule:
    - cron: '0 8 * * 1-5'  # 평일 오후 5시 (KST)

jobs:
  collect:
    name: 기업마당 완전 자동 처리
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 supabase pandas openpyxl
        pip install selenium webdriver-manager python-dotenv chardet
    
    - name: Determine Mode
      id: mode
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "mode=daily" >> $GITHUB_OUTPUT
          echo "📅 스케줄 실행: daily 모드"
        else
          echo "mode=${{ github.event.inputs.mode || 'daily' }}" >> $GITHUB_OUTPUT
          echo "🎯 수동 실행: ${{ github.event.inputs.mode || 'daily' }} 모드"
        fi
    
    - name: Step 1 - Excel Collection
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "======================================"
        echo "  STEP 1: 기업마당 엑셀 데이터 수집"
        echo "======================================"
        echo "🔍 모드: ${{ steps.mode.outputs.mode }}"
        python scripts/bizinfo_excel_collector.py
    
    - name: Step 2 - Daily Mode Crawler
      if: steps.mode.outputs.mode == 'daily'
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "======================================"
        echo "  STEP 2: Daily 모드 - K-Startup 방식 처리"
        echo "======================================"
        echo "최근 7일 데이터 중 DOC/HTML 타입 및 '다운로드' 파일명 수정..."
        
        # K-Startup 방식으로 파일 정보 수정 (Daily 모드용 수정)
        sed -i 's/\.execute()/\.gte("created_at", (datetime.now() - timedelta(days=7)).isoformat()).execute()/' scripts/bizinfo_attachment_fix_kstartup_style.py
        
        # datetime import 추가
        sed -i '1a from datetime import datetime, timedelta' scripts/bizinfo_attachment_fix_kstartup_style.py
        
        python scripts/bizinfo_attachment_fix_kstartup_style.py
    
    - name: Step 2 - Full Mode Crawler  
      if: steps.mode.outputs.mode == 'full'
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "======================================"
        echo "  STEP 2: Full 모드 - K-Startup 방식 전체 처리"
        echo "======================================"
        echo "전체 데이터 점검 및 파일 정보 정확도 개선..."
        echo "K-Startup 방식: HEAD 요청 + 파일 시그니처로 정확한 타입 판별"
        
        # K-Startup 방식으로 전체 처리
        python scripts/bizinfo_attachment_fix_kstartup_style.py
    
    - name: Step 3 - Attachment Processing
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "======================================"
        echo "  STEP 3: 첨부파일 정리"
        echo "======================================"
        python scripts/bizinfo_complete_processor_fast.py
    
    - name: Step 4 - Complete Encoding Fix
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "======================================"
        echo "  STEP 4: 인코딩 문제 완전 해결"
        echo "======================================"
        echo "🔧 이중 인코딩 복구 + K-Startup 방식 적용"
        echo "📝 깨진 파일명 패턴: â, ì, ë, í, ê, ã, Ã, Â"
        echo "🎯 목표: 모든 파일명을 정상적인 한글로 복구"
        python scripts/bizinfo_encoding_complete_fix.py
    
    - name: Generate Final Report
      if: always()
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        cat << 'EOF' > report.py
        import os
        from supabase import create_client
        from datetime import datetime
        
        url = os.environ.get('SUPABASE_URL')
        key = os.environ.get('SUPABASE_SERVICE_KEY')
        
        if not url or not key:
            print("환경변수 오류: SUPABASE_URL 또는 SUPABASE_SERVICE_KEY가 설정되지 않았습니다.")
            exit(1)
            
        supabase = create_client(url, key)
        
        # 실행 모드 확인
        mode = os.environ.get('MODE', 'unknown')
        
        try:
            # 전체 통계
            total = supabase.table('bizinfo_complete').select('id').execute()
            total_count = len(total.data) if total.data else 0
            
            # 오늘 추가된 데이터
            today = datetime.now().date().isoformat()
            today_new = supabase.table('bizinfo_complete').select('id').gte('created_at', today).execute()
            today_count = len(today_new.data) if today_new.data else 0
            
            # 정상 요약 보유 데이터 (150자 이상)
            all_data = supabase.table('bizinfo_complete').select('id,bsns_sumry').limit(1000).execute()
            if all_data.data:
                with_summary = sum(1 for item in all_data.data 
                                 if item.get('bsns_sumry') and len(item['bsns_sumry']) > 150)
            else:
                with_summary = 0
            
            # 첨부파일 보유 데이터 및 타입 분석
            with_attach = supabase.table('bizinfo_complete').select('id,attachment_urls').limit(1000).execute()
            attach_count = 0
            doc_count = 0
            hwp_count = 0
            pdf_count = 0
            download_count = 0
            broken_count = 0
            
            # 깨진 문자 패턴
            broken_patterns = ['â', 'ì', 'ë', 'í', 'ê', 'ã', 'ð', 'þ', 'ï', '¿', '½', 'Ã', 'Â']
            
            for item in with_attach.data:
                if item.get('attachment_urls') and item['attachment_urls'] != []:
                    attach_count += 1
                    for att in item['attachment_urls']:
                        file_type = att.get('type', '')
                        filename = att.get('display_filename', '')
                        
                        if file_type == 'DOC':
                            doc_count += 1
                        elif file_type == 'HWP':
                            hwp_count += 1
                        elif file_type == 'PDF':
                            pdf_count += 1
                        if filename == '다운로드':
                            download_count += 1
                        # 깨진 파일명 체크
                        if any(pattern in filename for pattern in broken_patterns):
                            broken_count += 1
            
            print('\n' + '='*60)
            print('      🏢 기업마당 처리 결과 보고서')
            print('='*60)
            print(f'🔍 실행 모드: {mode.upper()}')
            print(f'📊 전체 데이터: {total_count}개')
            print(f'📊 오늘 신규 추가: {today_count}개')
            print(f'📊 정상 요약 보유 (샘플 1000개): {with_summary}개 ({with_summary*100/min(1000, total_count):.1f}%)')
            print(f'📊 첨부파일 보유 (샘플 1000개): {attach_count}개 ({attach_count*100/min(1000, total_count):.1f}%)')
            
            # 파일 타입 분포
            print(f'\n📁 파일 타입 분포 (샘플 1000개):')
            print(f'   - HWP: {hwp_count}개')
            print(f'   - PDF: {pdf_count}개')
            print(f'   - DOC: {doc_count}개 {"⚠️ 수정 필요" if doc_count > 0 else "✅"}')
            print(f'   - "다운로드" 파일명: {download_count}개 {"⚠️ 수정 필요" if download_count > 0 else "✅"}')
            print(f'   - 깨진 파일명: {broken_count}개 {"⚠️ 인코딩 문제" if broken_count > 0 else "✅"}')
            
            # 최근 데이터 상태 점검
            recent = supabase.table('bizinfo_complete').select('id,attachment_urls,bsns_sumry,created_at').order('created_at', desc=True).limit(100).execute()
            if recent.data:
                recent_with_attach = sum(1 for item in recent.data 
                                       if item.get('attachment_urls') and item['attachment_urls'] != [])
                recent_with_summary = sum(1 for item in recent.data 
                                        if item.get('bsns_sumry') and len(item['bsns_sumry']) > 150)
                recent_broken = 0
                for item in recent.data:
                    if item.get('attachment_urls'):
                        for att in item['attachment_urls']:
                            filename = att.get('display_filename', '')
                            if any(pattern in filename for pattern in broken_patterns):
                                recent_broken += 1
                                break
                
                print(f'\n📌 최근 100개 데이터:')
                print(f'   - 첨부파일 보유: {recent_with_attach}개 ({recent_with_attach}%)')
                print(f'   - 정상 요약: {recent_with_summary}개 ({recent_with_summary}%)')
                print(f'   - 깨진 파일명: {recent_broken}개 {"⚠️" if recent_broken > 0 else "✅"}')
                
                if recent_with_attach < 70:
                    print('   ⚠️ 경고: 최근 데이터 첨부파일 수집률이 낮습니다!')
                if recent_with_summary < 70:
                    print('   ⚠️ 경고: 최근 데이터 요약 품질이 낮습니다!')
            
            # 품질 체크
            quality_score = (with_summary / min(1000, total_count) * 100) if total_count > 0 else 0
            attach_score = (attach_count / min(1000, total_count) * 100) if total_count > 0 else 0
            
            print('\n📈 품질 평가:')
            if quality_score >= 90:
                print('  ✅ 요약 품질: 우수 (90% 이상)')
            elif quality_score >= 70:
                print('  ⚠️ 요약 품질: 보통 (70-90%)')
            else:
                print('  ❌ 요약 품질: 개선 필요 (70% 미만)')
            
            if attach_score >= 90:
                print('  ✅ 첨부파일: 우수 (90% 이상)')
            elif attach_score >= 70:
                print('  ⚠️ 첨부파일: 보통 (70-90%)')
            else:
                print('  ❌ 첨부파일: 개선 필요 (70% 미만)')
            
            if broken_count == 0:
                print('  ✅ 인코딩: 정상 (깨진 파일명 없음)')
            else:
                print(f'  ⚠️ 인코딩: {broken_count}개 파일명 깨짐 감지')
            
            # 모드별 처리 방식 안내
            print('\n🔧 처리 방식:')
            if mode == 'daily':
                print('  - Daily 모드: 최근 7일 데이터만 처리')
                print('  - K-Startup 방식: HEAD 요청 + 파일 시그니처')
                print('  - STEP 4: 인코딩 문제 완전 해결 (이중 인코딩 복구)')
                print('  - 빠른 실행 (2-5분)')
            else:
                print('  - Full 모드: 전체 데이터 점검')
                print('  - K-Startup 방식: 정확한 파일 타입 판별')
                print('  - STEP 4: 깨진 파일명 전체 복구 (이중 인코딩 포함)')
                print('  - 병렬 처리 5개로 안정성 확보')
            
            if today_count > 0:
                print(f'\n✅ 오늘 {today_count}개 처리 성공!')
            else:
                print('\n⚠️ 오늘 새로운 데이터가 없습니다')
            
            print('='*60)
            
        except Exception as e:
            print(f"보고서 생성 중 오류: {e}")
            exit(1)
        EOF
        MODE=${{ steps.mode.outputs.mode }} python report.py
