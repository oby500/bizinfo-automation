name: K-Startup Collection

on:
  workflow_dispatch:
    inputs:
      mode:
        description: '수집 모드 선택'
        required: true
        default: 'daily'
        type: choice
        options:
        - daily    # 최근 200개만 확인 (2-3초)
        - full     # 전체 259페이지 확인 (30-60초)
  schedule:
    - cron: '0 22 * * *'  # 매일 오전 7시 (KST) - daily 모드로 실행

jobs:
  collect:
    name: K-Startup 수집 (${{ github.event.inputs.mode || 'daily' }})
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 supabase python-dotenv lxml
    
    - name: Set Collection Mode
      id: mode
      run: |
        # 스케줄 실행시 daily, 수동 실행시 선택한 모드
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "mode=daily" >> $GITHUB_OUTPUT
          echo "📅 스케줄 실행: 일일 수집 모드"
        else
          echo "mode=${{ github.event.inputs.mode || 'daily' }}" >> $GITHUB_OUTPUT
          echo "🎯 수동 실행: ${{ github.event.inputs.mode || 'daily' }} 모드"
        fi
    
    # ===== 수집 단계 =====
    - name: 📥 Daily Collection (최근 200개)
      if: steps.mode.outputs.mode == 'daily'
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "🚀 일일 수집 시작 (최근 200개만 확인)"
        echo "⏰ 실행 시간: $(date '+%Y-%m-%d %H:%M:%S')"
        python scripts/collect_kstartup_daily.py
    
    - name: 🔍 Full Collection (전체)
      if: steps.mode.outputs.mode == 'full'
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "📊 전체 수집 시작 (259페이지 모두 확인)"
        echo "⏰ 실행 시간: $(date '+%Y-%m-%d %H:%M:%S')"
        python scripts/collect_kstartup_batch.py
    
    # ===== 후처리 단계 =====
    - name: 📝 Parse Details (상세 파싱)
      if: success()
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "📝 상세 내용 병렬 파싱..."
        python scripts/kstartup_parallel_parser.py
      continue-on-error: true
    
    - name: 📎 Process Attachments
      if: success()
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "📎 첨부파일 정보 처리..."
        python scripts/kstartup_attachment_fix.py
      continue-on-error: true
    
    # ===== 결과 보고 =====
    - name: 📊 Final Report
      if: always()
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        python -c "
        import os
        from supabase import create_client
        from datetime import datetime
        
        url = os.environ.get('SUPABASE_URL')
        key = os.environ.get('SUPABASE_KEY')
        supabase = create_client(url, key)
        
        print('\\n' + '='*60)
        print('📊 K-Startup 수집 결과')
        print('='*60)
        
        # 오늘 추가된 데이터
        today = datetime.now().date().isoformat()
        new = supabase.table('kstartup_complete').select('biz_pbanc_nm, status, recept_end_dt').gte('created_at', today).execute()
        
        if new.data:
            print(f'✅ 오늘 추가: {len(new.data)}개')
            for item in new.data[:5]:
                print(f\"  • [{item['status']}] {item['biz_pbanc_nm'][:45]}\")
            if len(new.data) > 5:
                print(f'  ... 외 {len(new.data)-5}개')
        else:
            print('ℹ️ 오늘 추가된 공고 없음')
        
        # 전체 통계
        total = supabase.table('kstartup_complete').select('id').execute()
        active = supabase.table('kstartup_complete').select('id').in_('status', ['모집중', '마감임박']).execute()
        
        print(f'\\n📈 전체 통계:')
        print(f'  • 전체: {len(total.data)}개')
        print(f'  • 활성: {len(active.data)}개 (모집중/마감임박)')
        print('='*60)
        "
